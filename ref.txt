IDEA!!!!! :
gui app where you can import your own models and they will periodically appear in the game.


ENGINE REFERENCE SHEET

Order of control:

1. Main.java runs
2. DisplayManager.java initialized
3. Main Loop is started and loads current scene
4. DisplayManager.java updates display
5. SceneManager.java updates scene
6. Loader.java loades the model to the VAO
7. Current scene executes the renderer which then renders the geometry
8. Done. All actions are now repeated until the program is closed.


Scene reference:

0 -- TestScreen.java
1 -- TestScreen2.java



package objects;

import com.bulletphysics.collision.shapes.BoxShape;
import com.bulletphysics.collision.shapes.CollisionShape;
import com.bulletphysics.dynamics.RigidBody;
import com.bulletphysics.dynamics.RigidBodyConstructionInfo;
import com.bulletphysics.linearmath.DefaultMotionState;
import com.bulletphysics.linearmath.Transform;
import models.TexturedModel;
import org.lwjglx.util.vector.Vector3f;

import javax.vecmath.Matrix4f;
import javax.vecmath.Quat4f;

public class Object {

    private TexturedModel model;
    private Vector3f position;
    private float rotX, rotY, rotZ;
    private float scale;
    public static CollisionShape shape;
    public static RigidBody rigidBody;
    public javax.vecmath.Vector3f fallInertia = new javax.vecmath.Vector3f(0, 1, 0);
    public static Transform transform;
    public int mass = 0;

    public Object(TexturedModel model, Vector3f position, float rotX, float rotY, float rotZ, float scale, char colliderType) {
        this.model = model;
        this.position = position;
        this.rotX = rotX;
        this.rotY = rotY;
        this.rotZ = rotZ;
        this.scale = scale;

        transform = new Transform();
        transform.origin.set(new javax.vecmath.Vector3f(position.x, position.y, position.z));

        DefaultMotionState fallState = new DefaultMotionState(new Transform(new Matrix4f(new Quat4f(0, 0, 0, 1), new javax.vecmath.Vector3f(0, 50, 0), 1.0f)));

        RigidBodyConstructionInfo rigidBodyConstructionInfo = new RigidBodyConstructionInfo(mass, fallState, shape);
        rigidBody = new RigidBody(rigidBodyConstructionInfo);

        if(colliderType == 'b') {
            shape = new BoxShape(new javax.vecmath.Vector3f(1,1,1));
        } else if(colliderType == 's') {
            // Create a sphere collider
        } else if(colliderType == 'c') {
            // Create a cylinder collider
        } else if(colliderType == 'p') {
            // Create a plane collider
        }

    }

    public Object(TexturedModel model, Vector3f position, float rotX, float rotY, float rotZ, float scale) {
        this.model = model;
        this.position = position;
        this.rotX = rotX;
        this.rotY = rotY;
        this.rotZ = rotZ;
        this.scale = scale;
    }

}
